openapi: 3.0.0
info:
  title: Auth API
  version: 1.0.0
  description: API endpoints for user authentication and signup

servers:
  - url: http://localhost:4002
    description: Local development server

paths:
  /auth/signup:
    post:
      summary: User signup
      description: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - surname
                - age
                - email
                - password
              properties:
                name:
                  type: string
                  example: John
                surname:
                  type: string
                  example: Doe
                age:
                  type: integer
                  example: 25
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: P@ssw0rd123
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
        "500":
          description: Server error

  /auth/login:
    post:
      summary: User login
      description: Authenticate user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: P@ssw0rd123
      responses:
        "200":
          description: Successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "400":
          description: Missing fields or invalid payload
        "401":
          description: Wrong credentials

  /auth/user:
    get:
      summary: Get authenticated user info
      description: Retrieve the logged-in user's name and surname
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: John
                  surname:
                    type: string
                    example: Doe
        "401":
          description: Unauthorized (no or invalid token)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
